<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simple Pong Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Simple Pong Game</h1>
    <canvas id="pong" width="800" height="500"></canvas>
    <script src="script.js"></script>
</body>
</html>

body {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #222;
    color: #fff;
    font-family: Arial, sans-serif;
    margin: 0;
    height: 100vh;
}

h1 {
    margin-top: 40px;
    margin-bottom: 10px;
    letter-spacing: 2px;
}

#pong {
    background: #111;
    border: 2px solid #fff;
    box-shadow: 0 0 12px #000;
    display: block;
}
const canvas = document.getElementById("pong");
const ctx = canvas.getContext("2d");

// Game constants
const PADDLE_WIDTH = 10;
const PADDLE_HEIGHT = 100;
const BALL_RADIUS = 10;
const PLAYER_X = 10;
const AI_X = canvas.width - PADDLE_WIDTH - 10;

// State
let playerY = (canvas.height - PADDLE_HEIGHT) / 2;
let aiY = (canvas.height - PADDLE_HEIGHT) / 2;
let ballX = canvas.width / 2;
let ballY = canvas.height / 2;
let ballSpeedX = 5;
let ballSpeedY = 4;
let playerScore = 0;
let aiScore = 0;

// Mouse control
canvas.addEventListener('mousemove', function(e) {
    const rect = canvas.getBoundingClientRect();
    let mouseY = e.clientY - rect.top;
    playerY = mouseY - PADDLE_HEIGHT/2;
    // Clamp paddle inside canvas
    playerY = Math.max(Math.min(playerY, canvas.height - PADDLE_HEIGHT), 0);
});

// Draw functions
function drawRect(x, y, w, h, color) {
    ctx.fillStyle = color;
    ctx.fillRect(x, y, w, h);
}

function drawCircle(x, y, r, color) {
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(x, y, r, 0, Math.PI*2, false);
    ctx.closePath();
    ctx.fill();
}

function drawText(text, x, y, color) {
    ctx.fillStyle = color;
    ctx.font = "40px Arial";
    ctx.fillText(text, x, y);
}

function resetBall() {
    ballX = canvas.width / 2;
    ballY = canvas.height / 2;
    // Start ball towards last scorer
    ballSpeedX = -ballSpeedX;
    ballSpeedY = 4 * (Math.random() > 0.5 ? 1 : -1);
}

function drawNet() {
    for (let i = 0; i < canvas.height; i += 30) {
        drawRect(canvas.width/2 - 1, i, 2, 20, "#FFF");
    }
}

// Main update loop
function update() {
    // Move ball
    ballX += ballSpeedX;
    ballY += ballSpeedY;

    // Top and bottom wall collision
    if (ballY - BALL_RADIUS < 0 || ballY + BALL_RADIUS > canvas.height) {
        ballSpeedY = -ballSpeedY;
    }

    // Left paddle collision (Player)
    if (
        ballX - BALL_RADIUS < PLAYER_X + PADDLE_WIDTH &&
        ballY > playerY &&
        ballY < playerY + PADDLE_HEIGHT
    ) {
        ballSpeedX = -ballSpeedX;
        // Add angle based on where it hit the paddle
        let collidePoint = ballY - (playerY + PADDLE_HEIGHT/2);
        collidePoint = collidePoint / (PADDLE_HEIGHT/2);
        let angleRad = collidePoint * (Math.PI/4); // max bounce angle 45deg
        let direction = ballSpeedX > 0 ? 1 : -1;
        ballSpeedX = direction * (5 + Math.abs(collidePoint) * 2);
        ballSpeedY = 4 * Math.sin(angleRad);
    }

    // Right paddle collision (AI)
    if (
        ballX + BALL_RADIUS > AI_X &&
        ballY > aiY &&
        ballY < aiY + PADDLE_HEIGHT
    ) {
        ballSpeedX = -ballSpeedX;
        let collidePoint = ballY - (aiY + PADDLE_HEIGHT/2);
        collidePoint = collidePoint / (PADDLE_HEIGHT/2);
        let angleRad = collidePoint * (Math.PI/4);
        let direction = ballSpeedX > 0 ? 1 : -1;
        ballSpeedX = direction * (5 + Math.abs(collidePoint) * 2);
        ballSpeedY = 4 * Math.sin(angleRad);
    }

    // Left wall (AI scores)
    if (ballX - BALL_RADIUS < 0) {
        aiScore++;
        resetBall();
    }

    // Right wall (Player scores)
    if (ballX + BALL_RADIUS > canvas.width) {
        playerScore++;
        resetBall();
    }

    // AI movement: simple tracking
    let aiCenter = aiY + PADDLE_HEIGHT/2;
    if (aiCenter < ballY - 20) {
        aiY += 5;
    } else if (aiCenter > ballY + 20) {
        aiY -= 5;
    }
    // Clamp AI paddle inside canvas
    aiY = Math.max(Math.min(aiY, canvas.height - PADDLE_HEIGHT), 0);
}

function render() {
    // Clear
    drawRect(0, 0, canvas.width, canvas.height, "#111");
    drawNet();

    // Draw paddles
    drawRect(PLAYER_X, playerY, PADDLE_WIDTH, PADDLE_HEIGHT, "#FFF");
    drawRect(AI_X, aiY, PADDLE_WIDTH, PADDLE_HEIGHT, "#FFF");

    // Draw ball
    drawCircle(ballX, ballY, BALL_RADIUS, "#FFF");

    // Draw scores
    drawText(playerScore, canvas.width/4, 50, "#FFF");
    drawText(aiScore, 3*canvas.width/4, 50, "#FFF");
}

// Game loop
function game() {
    update();
    render();
    requestAnimationFrame(game);
}

game();

